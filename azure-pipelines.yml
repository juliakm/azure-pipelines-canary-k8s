trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: azure-pipelines-canary-k8s
  dockerRegistryServiceConnection: azure-pipelines-canary-acr
  imageRepository: 'azure-pipelines-canary-k8s'
  containerRegistry: kubernetessept4.azurecr.io
  tag: '$(Build.BuildId)'

jobs: 
- deployment: 
  environment: akscanary
  pool:
    vmImage: ubuntu-latest
  strategy:                  
    canary:      
      increments: [10,20]  
      preDeploy:                                     
        steps:           
        - task: Docker@2
          displayName: Build and push image
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageName)
            command: buildAndPush
            Dockerfile: app/Dockerfile
            tags: |
              $(tag)
          
        - publish: manifests
          artifact: manifests

        - publish: misc
          artifact: misc      
      deploy:             
        steps: 
        - script: echo "deploy updates..."
        - task: KubernetesManifest@1
          displayName: Create Docker Registry Secret
          inputs:
            action: 'createSecret'
            connectionType: 'azureResourceManager'
            azureSubscriptionConnection: 'azure-pipelines-canary-sc'
            azureResourceGroup: 'kubernetes-testing'
            kubernetesCluster: 'myAKSClustersept3'
            secretType: 'dockerRegistry'
            secretName: 'my-acr-secret'
            dockerRegistryEndpoint: 'azure-pipelines-canary-acr'

        - task: KubernetesManifest@1
          displayName: Deploy to Kubernetes cluster
          inputs:
            action: 'deploy'
            connectionType: 'azureResourceManager'
            azureSubscriptionConnection: 'azure-pipelines-canary-sc'
            azureResourceGroup: 'kubernetes-testing'
            kubernetesCluster: 'myAKSClustersept3'
            strategy: 'canary'
            percentage: '20'
            manifests: |
              $(Pipeline.Workspace)/manifests/deployment.yml
              $(Pipeline.Workspace)/manifests/service.yml
            containers: '$(containerRegistry)/$(imageRepository):$(tag)'
            imagePullSecrets: 'my-acr-secret'

      postRouteTraffic: 
        pool: server 
        steps:           
        - script: echo "monitor application health...""
      on: 
        failure: 
          steps: 
          - script: echo "clean-up, rollback..."   
        success: 
          steps: 
          - script: echo "checks passed, notify..."